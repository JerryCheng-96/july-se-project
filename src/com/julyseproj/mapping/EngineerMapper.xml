<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.julyseproj.IDao.EngineerMapper">
  <resultMap id="BaseResultMap" type="com.julyseproj.entity.Engineer">
    <id column="engineer_id" jdbcType="INTEGER" property="engineerId" />
    <result column="engineer_name" jdbcType="VARCHAR" property="engineerName" />
    <result column="engineer_sex" jdbcType="CHAR" property="engineerSex" />
    <result column="engineer_company" jdbcType="VARCHAR" property="engineerCompany" />
    <result column="engineer_department" jdbcType="VARCHAR" property="engineerDepartment" />
    <result column="engineer_job" jdbcType="VARCHAR" property="engineerJob" />
  </resultMap>

  <sql id="Base_Column_List">
    engineer_id, engineer_name, engineer_sex, engineer_company, engineer_department, 
    engineer_job
  </sql>

  <select id="selectAll" resultMap="BaseResultMap" resultType="com.julyseproj.entity.Engineer">
    select * from engineer;
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from engineer
    where engineer_id = #{engineerId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from engineer
    where engineer_id = #{engineerId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.julyseproj.entity.Engineer">
    insert into engineer (engineer_id, engineer_name, engineer_sex, 
      engineer_company, engineer_department, engineer_job
      )
    values (#{engineerId,jdbcType=INTEGER}, #{engineerName,jdbcType=VARCHAR}, #{engineerSex,jdbcType=CHAR}, 
      #{engineerCompany,jdbcType=VARCHAR}, #{engineerDepartment,jdbcType=VARCHAR}, #{engineerJob,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.julyseproj.entity.Engineer">
    insert into engineer
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="engineerId != null">
        engineer_id,
      </if>
      <if test="engineerName != null">
        engineer_name,
      </if>
      <if test="engineerSex != null">
        engineer_sex,
      </if>
      <if test="engineerCompany != null">
        engineer_company,
      </if>
      <if test="engineerDepartment != null">
        engineer_department,
      </if>
      <if test="engineerJob != null">
        engineer_job,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="engineerId != null">
        #{engineerId,jdbcType=INTEGER},
      </if>
      <if test="engineerName != null">
        #{engineerName,jdbcType=VARCHAR},
      </if>
      <if test="engineerSex != null">
        #{engineerSex,jdbcType=CHAR},
      </if>
      <if test="engineerCompany != null">
        #{engineerCompany,jdbcType=VARCHAR},
      </if>
      <if test="engineerDepartment != null">
        #{engineerDepartment,jdbcType=VARCHAR},
      </if>
      <if test="engineerJob != null">
        #{engineerJob,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.julyseproj.entity.Engineer">
    update engineer
    <set>
      <if test="engineerName != null">
        engineer_name = #{engineerName,jdbcType=VARCHAR},
      </if>
      <if test="engineerSex != null">
        engineer_sex = #{engineerSex,jdbcType=CHAR},
      </if>
      <if test="engineerCompany != null">
        engineer_company = #{engineerCompany,jdbcType=VARCHAR},
      </if>
      <if test="engineerDepartment != null">
        engineer_department = #{engineerDepartment,jdbcType=VARCHAR},
      </if>
      <if test="engineerJob != null">
        engineer_job = #{engineerJob,jdbcType=VARCHAR},
      </if>
    </set>
    where engineer_id = #{engineerId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.julyseproj.entity.Engineer">
    update engineer
    set engineer_name = #{engineerName,jdbcType=VARCHAR},
      engineer_sex = #{engineerSex,jdbcType=CHAR},
      engineer_company = #{engineerCompany,jdbcType=VARCHAR},
      engineer_department = #{engineerDepartment,jdbcType=VARCHAR},
      engineer_job = #{engineerJob,jdbcType=VARCHAR}
    where engineer_id = #{engineerId,jdbcType=INTEGER}
  </update>
</mapper>